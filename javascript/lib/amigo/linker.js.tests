////
//// Some unit testing for linker.js (even though its data is generated).
////

// Correct environment, ready testing.
var bbop = require('bbop').bbop;
var amigo = require('amigo').amigo;
var mr_t = new bbop.test();

///
/// Start unit testing.
///


//(function(){
var sd = new amigo.data.server();
var wa = sd.app_base();
var l = new amigo.linker();

//mr_t.is_defined(amigo.version.revision, 'revision defined');
//mr_t.is_defined(amigo.version.release, 'release defined');
mr_t.is_same_atom(l.url('GO:0022008'),
		  'http://amigo.geneontology.org/cgi-bin/amigo/term-details.cgi?term=GO:0022008',
		  'linker: go');
mr_t.is_same_atom(l.url('GO:0022008', 'term'),
		  //'amigo?mode=term&term=GO:0022008',
		  //'term/GO:0022008',
		  wa + '/amigo/term/GO:0022008',
		  'linker: go term');
mr_t.is_same_atom(l.url('foo', 'gp'),
		  //'amigo?mode=gene_product&gp=foo',
		  //'gene_product/foo',
		  wa + '/amigo/gene_product/foo',
		  'linker: go gp');
mr_t.is_same_atom(l.url('SGD:S000006169'),
		  'http://db.yeastgenome.org/cgi-bin/locus.pl?dbid=S000006169',
		  'linker: sgd');
mr_t.is_same_atom(l.url('XXXX:S000006169'),
		  null,
		  'linker: null');

// Okay, now check that synonyms work like we think they should.
// Try it on the every annoying NCBITaxon.
mr_t.is_same_atom(l.url('taxon:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 1');
mr_t.is_same_atom(l.url('NCBITaxon:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 2');
mr_t.is_same_atom(l.url('ncbi_taxid:7227'),
		  'http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=7227',
		  'linker: ncbi taxon 3');

// And make sure that we can do things like PANTHER's double.
// url_syntax: http://www.geneontology.org/gene-associations/submission/paint/[example_id]/[example_id].txt
mr_t.is_same_atom(l.url('PAINT_REF:PTHR10046'),
		  'http://www.geneontology.org/gene-associations/submission/paint/PTHR10046/PTHR10046.txt',
		  'linker: panther');

// And let's make sure that nothing produces nothing.
mr_t.is_not_defined(l.url(null), 'null url');
mr_t.is_not_defined(l.url(''), "'' url");
mr_t.is_not_defined(l.anchor(null), 'null anchor');

// })();

///
/// End unit testing.
///

// Final report.
mr_t.report();
